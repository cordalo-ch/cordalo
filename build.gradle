buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_group_plugins = 'net.corda.plugins'
        corda_release_version = '4.1'
        corda_gradle_plugins_version = '4.0.42'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.9.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.9.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath "$corda_release_group_plugins:cordapp:$corda_gradle_plugins_version"
        classpath "$corda_release_group_plugins:cordformation:$corda_gradle_plugins_version"
        classpath "$corda_release_group_plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath "net.saliman:gradle-cobertura-plugin:2.5.4"
        classpath "com.github.kt3k.coveralls:com.github.kt3k.coveralls.gradle.plugin:2.8.4"
    }
}

allprojects {
    apply plugin: 'java'

    // maven plugin to format the pom
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'net.saliman.cobertura'
    apply plugin: 'idea'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    // This is to skip the tasks for which there is a skip<TaskName>=true environment variable
    def skippedTaskNames = System.getenv().findAll { key, value ->
        key.startsWith("skip") && value.equalsIgnoreCase("true")
    }.keySet().collect { it.substring(4) }

    gradle.startParameter.excludedTaskNames += skippedTaskNames

    // compiler arguments
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    /**
     * Artifact related items
     */
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        // dont add javadocjars and source to it because travis is not able to build
        // archives javadocJar, sourcesJar
    }

    /**
     * Deployment related items
     */
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.allTasks.any { it instanceof Sign }) {
            allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
            allprojects { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') }
            allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
        }
        // Do not sign archives by default (a local build without gpg keyring should succeed)
        if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
            tasks.findAll {
                it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar'
            }.each { task ->
                task.enabled = false
            }
        }
    }

    signing {
        sign configurations.archives
    }
    build.dependsOn.remove(signArchives)

    uploadArchives {
        repositories
                {
                    mavenDeployer
                            {
                                beforeDeployment
                                        {
                                            MavenDeployment deployment -> signing.signPom(deployment)
                                        }

                                repository(url: maven2_url) {
                                    authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
                                }

                                snapshotRepository(url: snapshot_url) {
                                    authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
                                }

                                pom.project
                                        {
                                            name project_name
                                            packaging 'jar'
                                            // optionally artifactId can be defined here
                                            description project_description
                                            url project_url

                                            scm {
                                                connection project_scm
                                                developerConnection project_scm
                                                url project_url
                                            }

                                            licenses {
                                                license {
                                                    name project_license_slug
                                                    url project_license_url
                                                }
                                            }

                                            developers {
                                                developer {
                                                    id 'lolo8304'
                                                    name 'Lorenz Hänggi aka Lolo'
                                                    email 'lolo8304@gmail.com'
                                                }
                                                developer {
                                                    id 'cedricwalter'
                                                    name 'Cédric Walter'
                                                    email 'cedric.walter@gmail.com'
                                                }
                                            }
                                        }
                            }
                }
    }

}

ext {
    cordalo_revision = "git rev-parse HEAD".execute().text.trim()
}

apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'com.github.kt3k.coveralls'

cobertura {
    rootProject.subprojects.each {
        coverageDirs << file("${it.name}/build/classes/main")
    }
    coverageFormats = ['html', 'xml']
}


sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'ch.cordalo'
version '0.4-SNAPSHOT'

dependencies {
    compile "$corda_release_group:corda-core:$corda_release_version"
    compile "$corda_release_group:corda-jackson:$corda_release_version"
    compile "$corda_release_group:corda-test-utils:$corda_release_version"
    compile "$corda_release_group:corda-node-driver:$corda_release_version"
    testCompile "junit:junit:$junit_version"
}


task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

jar {
    // Prevent the root project from building an unwanted dummy CorDapp.
    enabled = true
}

// based on docu https://central.sonatype.org/pages/working-with-pgp-signatures.html
// https://central.sonatype.org/pages/gradle.html
