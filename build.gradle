buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_group_plugins = 'net.corda.plugins'
        corda_release_version = '4.1'
        corda_gradle_plugins_version = '4.0.42'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.9.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.9.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'
    }

    ext {
        cordalo_revision = "git rev-parse HEAD".execute().text.trim()
        cordalo_branch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://plugins.gradle.org/m2/'}
    }

    dependencies {
        classpath "$corda_release_group_plugins:cordapp:$corda_gradle_plugins_version"
        classpath "$corda_release_group_plugins:cordformation:$corda_gradle_plugins_version"
        classpath "$corda_release_group_plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath "net.saliman:gradle-cobertura-plugin:2.5.4"
        classpath "com.github.kt3k.coveralls:com.github.kt3k.coveralls.gradle.plugin:2.8.4"
    }
}
allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'net.saliman.cobertura'

    group 'ch.cordalo'
    group 'ch.cordalo'
    version System.getenv("TRAVIS_BRANCH") ? System.getenv("TRAVIS_BRANCH")+"-SNAPSHOT": "0.13-SNAPSHOT";
    project.logger.lifecycle("cordalo version $version")
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        // dont add javadocjars and source to it because travis is not able to build
        archives javadocJar, sourcesJar
    }
    // error: Could not find method coveralls()
    // tasks.coveralls {
    //    dependsOn 'check'
    //}

    signing {
        def key = project.findProperty("signingKey") ?: System.getenv("signingKey");
        def pwd = project.findProperty("signingPassword") ?: System.getenv("signingPassword");

        // Using in-memory ascii-armored keys
        // In some setups it is easier to use environment variables to pass the secret key and password used for signing.
        // For instance, when using a CI server to sign artifacts, securely providing the keyring file is often troublesome.
        // On the other hand, most CI servers provide means to securely store environment variables and provide them to builds.
        // Using the following setup, you can pass the secret key (in ascii-armored format) and the password using
        // the signingKey and signingPassword environment variables, respectively:
        useInMemoryPgpKeys(key, pwd)
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                def ossrhUsername = project.findProperty("ossrhUsername") ?: System.getenv("ossrhUsername")
                def ossrhPassword = project.findProperty("ossrhPassword") ?: System.getenv("ossrhPassword")

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name 'cordalo.ch CORDA extensions - module ${project}'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'cordalo.ch is a simple framework for fast CORDA development - module ${project}'
                    url 'https://cordalo.ch'

                    scm {
                        connection 'scm:git:https://github.com/cordalo-ch/cordalo.git'
                        developerConnection 'scm:git:https://github.com/cordalo-ch/cordalo.git'
                        url 'https://github.com/cordalo-ch/cordalo'
                    }

                    licenses {
                        license {
                            name 'MIT'
                            url 'https://cordalo.ch/LICENCE.md'
                        }
                    }

                    developers {
                        developer {
                            id 'lolo8304'
                            name 'Lorenz HÃ¤nggi aka Lolo'
                            email 'lolo8304@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'com.github.kt3k.coveralls'

cobertura {
    rootProject.subprojects.each {
        coverageDirs << file("${it.name}/build/classes/main")
    }
    coverageFormats = ['html', 'xml']
}


sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "$corda_release_group:corda-core:$corda_release_version"
    compile "$corda_release_group:corda-jackson:$corda_release_version"
    compile "$corda_release_group:corda-test-utils:$corda_release_version"
    compile "$corda_release_group:corda-node-driver:$corda_release_version"
    testCompile "junit:junit:$junit_version"
}


task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

jar {
    // Prevent the root project from building an unwanted dummy CorDapp.
    enabled = true
}

/*
 * Copyright (c) 2019 by cordalo.ch - MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// based on docu https://central.sonatype.org/pages/working-with-pgp-signatures.html
// https://central.sonatype.org/pages/gradle.html
