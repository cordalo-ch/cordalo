
def v_ossrhUsername="FOO"
def v_ossrhPassword="BAR"

if (project.hasProperty("ossrhUsername")) {
    v_ossrhUsername = ossrhUsername
}
if (project.hasProperty("ossrhPassword")) {
    v_ossrhPassword = ossrhPassword
}

buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_group_plugins = 'net.corda.plugins'
        corda_release_version = '4.1'
        corda_gradle_plugins_version = '4.0.42'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.9.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.9.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    }

    dependencies {
        classpath "$corda_release_group_plugins:cordapp:$corda_gradle_plugins_version"
        classpath "$corda_release_group_plugins:cordformation:$corda_gradle_plugins_version"
        classpath "$corda_release_group_plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath "org.eluder.coveralls:coveralls-maven-plugin:4.3.0"
        classpath "org.codehaus.mojo:cobertura-maven-plugin:2.7"

    }
}
allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        // dont add javadocjars and source to it because travis is not able to build
        // archives javadocJar, sourcesJar
    }

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: v_ossrhUsername, password: v_ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: v_ossrhUsername, password: v_ossrhPassword)
                }
                pom.project {
                    name 'cordalo.ch CORDA extensions'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'cordalo.ch is a simple framework for fast CORDA development'
                    url 'https://cordalo.ch'

                    scm {
                        connection 'scm:git:https://github.com/cordalo-ch/cordalo.git'
                        developerConnection 'scm:git:https://github.com/cordalo-ch/cordalo.git'
                        url 'https://github.com/cordalo-ch/cordalo'
                    }

                    licenses {
                        license {
                            name 'MIT'
                            url 'https://cordalo.ch/LICENCE.md'
                        }
                    }

                    developers {
                        developer {
                            id 'lolo8304'
                            name 'Lorenz HÃ¤nggi aka Lolo'
                            email 'lolo8304@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

ext {
    cordalo_revision = "git rev-parse HEAD".execute().text.trim()
}

apply plugin: 'net.corda.plugins.quasar-utils'


sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'ch.cordalo'
version '0.1-SNAPSHOT'

dependencies {
    compile "$corda_release_group:corda-core:$corda_release_version"
    compile "$corda_release_group:corda-jackson:$corda_release_version"
    compile "$corda_release_group:corda-test-utils:$corda_release_version"
    compile "$corda_release_group:corda-node-driver:$corda_release_version"
    testCompile "junit:junit:$junit_version"
}


task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

jar {
    // Prevent the root project from building an unwanted dummy CorDapp.
    enabled = true
}

// based on docu https://central.sonatype.org/pages/working-with-pgp-signatures.html
// https://central.sonatype.org/pages/gradle.html
